Search.setIndex({"docnames": ["bijections", "distributions", "flowjax", "index", "nn"], "filenames": ["bijections.rst", "distributions.rst", "flowjax.rst", "index.rst", "nn.rst"], "titles": ["Bijections", "Distributions", "&lt;no title&gt;", "FlowJax", "Neural networks"], "terms": {"from": [0, 1, 4], "flowjax": [0, 1, 4], "class": [0, 1, 4], "arg": [0, 1, 4], "kwarg": [0, 1, 4], "sourc": [0, 1, 4], "base": [0, 1, 4], "abc": [0, 1], "modul": [0, 1, 4], "basic": 0, "all": 0, "should": [0, 1], "support": 0, "condit": [0, 1, 3, 4], "variabl": [0, 1, 4], "even": 0, "ignor": [0, 1], "cond_dim": [0, 1, 3, 4], "int": [0, 1, 4], "abstract": 0, "transform": [0, 1, 3], "x": [0, 1], "ani": [0, 1, 4], "option": [0, 1, 4], "none": [0, 1, 4], "appli": 0, "transform_and_log_abs_det_jacobian": [0, 3], "tupl": [0, 4], "comput": 0, "log": [0, 1], "absolut": 0, "valu": 0, "jacobian": 0, "determin": 0, "invers": [0, 1, 3], "y": 0, "invert": [0, 3], "inverse_and_log_abs_det_jacobian": [0, 3], "__init__": [0, 1, 3, 4], "which": [0, 1], "facilit": 0, "parameteris": 0, "neural": [0, 3], "network": [0, 3], "output": [0, 4], "e": 0, "g": 0, "coupl": [0, 3], "flow": 0, "mask": [0, 3, 4], "autoress": 0, "contain": 0, "directli": 0, "trainabl": 0, "paramet": [0, 1, 4], "num_param": [0, 3], "dim": [0, 1, 3], "total": 0, "number": [0, 1, 4], "requir": 0, "get_rank": [0, 3], "The": [0, 1, 4], "rank": [0, 4], "i": [0, 1], "dimens": [0, 1, 4], "input": [0, 4], "correspond": 0, "get_arg": [0, 3], "param": [0, 3], "list": [0, 4], "unconstrain": [0, 4], "vector": [0, 1], "nn": [0, 4], "affin": [0, 3], "elementwis": 0, "loc": [0, 1, 3], "scale": [0, 1, 3], "broadcast": [0, 1], "arrai": [0, 1, 4], "locat": 0, "posit": 0, "1": [0, 1], "0": [0, 1, 4], "log_scal": [0, 3], "properti": [0, 1], "triangularaffin": [0, 3], "form": [0, 1], "ax": 0, "b": 0, "where": [0, 4], "A": 0, "lower": [0, 3], "upper": 0, "triangular": 0, "matrix": [0, 1, 4], "To": 0, "ensur": 0, "invertiblil": 0, "diagon": [0, 4], "entri": [0, 1], "greater": 0, "than": 0, "min_diag": [0, 3], "translat": 0, "arr": [0, 3], "bool": [0, 4], "whether": [0, 1, 4], "select": 0, "other": 0, "element": 0, "default": [0, 1, 4], "true": [0, 4], "float": 0, "minimum": 0, "1e": 0, "6": 0, "weight_log_scal": [0, 3], "If": [0, 1], "provid": [0, 1], "carri": [0, 4], "out": [0, 4], "weight": [0, 4], "normalis": [0, 4], "initialis": [0, 4], "zero": 0, "06": 0, "weight_normalis": 0, "fals": 0, "diag_idx": [0, 3], "tri_mask": [0, 3], "get": 0, "constraint": 0, "blockautoregressivenetwork": [0, 3], "block": [0, 4], "autoregress": [0, 4], "see": 0, "http": [0, 1, 4], "arxiv": [0, 4], "org": [0, 1, 4], "ab": [0, 4], "1904": [0, 4], "04676": [0, 4], "kei": [0, 1, 4], "keyarrai": [0, 1, 4], "jax": [0, 1, 4], "prngkei": [0, 1, 4], "distribut": [0, 3], "extra": 0, "depth": [0, 3, 4], "hidden": [0, 4], "layer": [0, 3, 4], "block_dim": [0, 3], "size": 0, "roughli": 0, "activ": [0, 3, 4], "callabl": [0, 4], "function": [0, 4], "_blocktanh": 0, "prngkeyarrai": [0, 1, 4], "implement": [0, 1], "1605": 0, "08803": 0, "condition": [0, 3], "netork": 0, "d": [0, 3], "untransform": 0, "addit": [0, 4], "nn_width": 0, "width": 0, "nn_depth": 0, "nn_activ": 0, "jnn": [0, 4], "relu": [0, 4], "_src": [0, 4], "prng": [0, 4], "type": [0, 1, 4], "custom_deriv": [0, 4], "custom_jvp": [0, 4], "object": [0, 1, 4], "mlp": [0, 4], "maskedautoregress": [0, 3], "1705": 0, "07057v4": 0, "an": [0, 1, 4], "structur": 0, "autoregressive_mlp": [0, 3], "autoregressivemlp": [0, 3, 4], "inv_scan_fn": [0, 3], "init": [0, 4], "_": 0, "One": 0, "step": 0, "get_transformer_arg": [0, 3], "tanh": [0, 3], "tanhlineartail": [0, 3], "creat": 0, "linear": [0, 3, 4], "tail": 0, "beyond": 0, "max_val": [0, 3], "abov": 0, "below": 0, "becom": 0, "linear_grad": [0, 3], "intercept": [0, 3], "chain": [0, 3], "togeth": 0, "arbitrari": 0, "anoth": 0, "sequenc": 0, "scannablechain": [0, 3], "repeatedli": 0, "same": 0, "differ": 0, "intern": 0, "us": [0, 1], "lax": 0, "scan": 0, "reduc": 0, "compil": 0, "time": 0, "leav": 0, "have": 0, "lead": [0, 1], "axi": [0, 1], "over": [0, 1], "often": 0, "conveni": 0, "construct": 0, "equinox": [0, 4], "filter_vmap": 0, "For": 0, "exampl": 0, "jnp": 0, "ones": 0, "3": 0, "2": [0, 1], "thi": 0, "would": 0, "equivil": 0, "p": 0, "static": [0, 3], "method": [0, 4], "vice": 0, "versa": 0, "note": 0, "gener": 0, "we": [0, 1], "defin": 0, "forward": [0, 1], "ar": [0, 1, 4], "preffer": 0, "faster": 0, "actual": 0, "train": 0, "want": 0, "densiti": [0, 1], "evalu": [0, 1], "henc": 0, "achiev": 0, "aim": 0, "flip": [0, 3], "argument": 0, "permut": [0, 3], "index": 0, "repres": 0, "new": 0, "order": 0, "inverse_permut": [0, 3], "transformertobiject": [0, 3], "convert": 0, "can": [0, 1], "additivelinearcondit": [0, 3], "w": [0, 3, 4], "descript": 0, "partial": [0, 3], "compat": 0, "subset": 0, "idx": [0, 3], "indic": 0, "integ": 0, "slice": 0, "ndarrai": 0, "dtype": 0, "portion": 0, "multidimension": 0, "flatten": 0, "union": 0, "embedcondit": [0, 3], "embed": 0, "dimension": 0, "return": [0, 1], "ha": 0, "equal": 0, "raw": 0, "embedding_net": [0, 3], "eqx": 0, "emb": 0, "uncondit": 1, "sampl": [1, 3], "n": 1, "ndim": 1, "allow": 1, "repeat": 1, "singl": 1, "drawn": 1, "treat": 1, "batch": 1, "one": [1, 4], "each": [1, 4], "row": 1, "log_prob": [1, 3], "probabl": 1, "matric": 1, "pass": 1, "vmap": 1, "vectoris": 1, "point": 1, "like": 1, "biject": [1, 3], "take": 1, "base_dist": [1, 3], "standardnorm": [1, 3], "standard": 1, "normal": [1, 3], "mean": 1, "deviat": 1, "uniform": [1, 3], "minval": [1, 3], "ith": 1, "give": 1, "min": 1, "maxval": [1, 3], "max": 1, "gumbel": [1, 3], "cauchi": [1, 3], "studentt": [1, 3], "df": [1, 3], "blockautoregressivelinear": [3, 4], "maskedlinear": [3, 4], "multilay": 4, "perceptron": 4, "similar": 4, "compos": 4, "connect": 4, "onli": 4, "exist": 4, "in_rank": [3, 4], "out_rank": [3, 4], "hidden_rank": [3, 4], "": 4, "final_activ": [3, 4], "final": 4, "_ident": 4, "in_siz": [3, 4], "out_siz": [3, 4], "width_siz": [3, 4], "incorpor": 4, "append": 4, "column": 4, "left": 4, "random": 4, "n_block": [3, 4], "origin": 4, "block_shap": [3, 4], "shape": 4, "glorot_uniform": 4, "w_log_scal": [3, 4], "variance_sc": 4, "local": 4, "b_diag_mask": [3, 4], "b_diag_mask_idx": [3, 4], "b_tril_mask": [3, 4], "bia": [3, 4], "get_normalised_weight": [3, 4], "in_featur": [3, 4], "out_featur": [3, 4], "use_bia": 4, "includ": 4, "term": 4, "due": 0, "doe": 0, "guarante": 0, "constrain": 0, "encourag": 0, "within": 0, "interv": 0, "subsequ": 0, "some": 0, "whilst": 0, "avoid": 0, "issu": 0, "numer": 0, "instabl": 0, "specif": 0, "independ": 1, "std": 1, "between": 1, "ref": 1, "en": 1, "wikipedia": 1, "wiki": 1, "gumbel_distribut": 1, "cauchy_distribut": 1, "student": 1, "t": 1}, "objects": {"flowjax": [[0, 0, 0, "-", "bijections"], [1, 0, 0, "-", "distributions"], [4, 0, 0, "-", "nn"]], "flowjax.bijections": [[0, 1, 1, "", "AdditiveLinearCondition"], [0, 1, 1, "", "Affine"], [0, 1, 1, "", "Bijection"], [0, 1, 1, "", "BlockAutoregressiveNetwork"], [0, 1, 1, "", "Chain"], [0, 1, 1, "", "Coupling"], [0, 1, 1, "", "EmbedCondition"], [0, 1, 1, "", "Flip"], [0, 1, 1, "", "Invert"], [0, 1, 1, "", "MaskedAutoregressive"], [0, 1, 1, "", "Partial"], [0, 1, 1, "", "Permute"], [0, 1, 1, "", "ScannableChain"], [0, 1, 1, "", "Tanh"], [0, 1, 1, "", "TanhLinearTails"], [0, 1, 1, "", "Transformer"], [0, 1, 1, "", "TransformerToBijection"], [0, 1, 1, "", "TriangularAffine"]], "flowjax.bijections.AdditiveLinearCondition": [[0, 2, 1, "", "W"], [0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Affine": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "loc"], [0, 2, 1, "", "log_scale"], [0, 4, 1, "", "scale"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Bijection": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.BlockAutoregressiveNetwork": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "activation"], [0, 2, 1, "", "block_dim"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "depth"], [0, 2, 1, "", "dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "layers"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Chain": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "bijections"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Coupling": [[0, 2, 1, "", "D"], [0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "conditioner"], [0, 2, 1, "", "d"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"], [0, 2, 1, "", "transformer"]], "flowjax.bijections.EmbedCondition": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "bijection"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "embedding_net"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Flip": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Invert": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "bijection"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.MaskedAutoregressive": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "autoregressive_mlp"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "get_transformer_args"], [0, 3, 1, "", "inv_scan_fn"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"], [0, 2, 1, "", "transformer"]], "flowjax.bijections.Partial": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "bijection"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "idxs"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Permute": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "inverse_permutation"], [0, 2, 1, "", "permutation"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.ScannableChain": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "params"], [0, 2, 1, "", "static"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Tanh": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.TanhLinearTails": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 4, 1, "", "intercept"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 4, 1, "", "linear_grad"], [0, 2, 1, "", "max_val"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.Transformer": [[0, 3, 1, "", "__init__"], [0, 3, 1, "", "get_args"], [0, 3, 1, "", "get_ranks"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 3, 1, "", "num_params"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"]], "flowjax.bijections.TransformerToBijection": [[0, 3, 1, "", "__init__"], [0, 2, 1, "", "cond_dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "params"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"], [0, 2, 1, "", "transformer"]], "flowjax.bijections.TriangularAffine": [[0, 3, 1, "", "__init__"], [0, 4, 1, "", "arr"], [0, 2, 1, "", "cond_dim"], [0, 2, 1, "", "diag_idxs"], [0, 2, 1, "", "dim"], [0, 3, 1, "", "inverse"], [0, 3, 1, "", "inverse_and_log_abs_det_jacobian"], [0, 2, 1, "", "loc"], [0, 2, 1, "", "lower"], [0, 2, 1, "", "min_diag"], [0, 3, 1, "", "transform"], [0, 3, 1, "", "transform_and_log_abs_det_jacobian"], [0, 2, 1, "", "tri_mask"], [0, 2, 1, "", "weight_log_scale"]], "flowjax.distributions": [[1, 1, 1, "", "Cauchy"], [1, 1, 1, "", "Distribution"], [1, 1, 1, "", "Gumbel"], [1, 1, 1, "", "Normal"], [1, 1, 1, "", "StandardNormal"], [1, 1, 1, "", "StudentT"], [1, 1, 1, "", "Transformed"], [1, 1, 1, "", "Uniform"]], "flowjax.distributions.Cauchy": [[1, 3, 1, "", "__init__"], [1, 4, 1, "", "loc"], [1, 4, 1, "", "scale"]], "flowjax.distributions.Distribution": [[1, 3, 1, "", "__init__"], [1, 2, 1, "", "cond_dim"], [1, 4, 1, "", "conditional"], [1, 2, 1, "", "dim"], [1, 3, 1, "", "log_prob"], [1, 3, 1, "", "sample"]], "flowjax.distributions.Gumbel": [[1, 3, 1, "", "__init__"], [1, 4, 1, "", "loc"], [1, 4, 1, "", "scale"]], "flowjax.distributions.Normal": [[1, 3, 1, "", "__init__"], [1, 4, 1, "", "loc"], [1, 4, 1, "", "scale"]], "flowjax.distributions.StandardNormal": [[1, 3, 1, "", "__init__"]], "flowjax.distributions.StudentT": [[1, 3, 1, "", "__init__"], [1, 4, 1, "", "df"], [1, 4, 1, "", "loc"], [1, 4, 1, "", "scale"]], "flowjax.distributions.Transformed": [[1, 3, 1, "", "__init__"], [1, 2, 1, "", "base_dist"], [1, 2, 1, "", "bijection"], [1, 2, 1, "", "cond_dim"], [1, 2, 1, "", "dim"]], "flowjax.distributions.Uniform": [[1, 3, 1, "", "__init__"], [1, 4, 1, "", "maxval"], [1, 4, 1, "", "minval"]], "flowjax.nn": [[4, 1, 1, "", "AutoregressiveMLP"], [4, 1, 1, "", "BlockAutoregressiveLinear"], [4, 1, 1, "", "MaskedLinear"]], "flowjax.nn.AutoregressiveMLP": [[4, 3, 1, "", "__init__"], [4, 2, 1, "", "activation"], [4, 2, 1, "", "depth"], [4, 2, 1, "", "final_activation"], [4, 2, 1, "", "hidden_ranks"], [4, 2, 1, "", "in_ranks"], [4, 2, 1, "", "in_size"], [4, 2, 1, "", "layers"], [4, 2, 1, "", "out_ranks"], [4, 2, 1, "", "out_size"], [4, 2, 1, "", "width_size"]], "flowjax.nn.BlockAutoregressiveLinear": [[4, 2, 1, "", "W"], [4, 2, 1, "", "W_log_scale"], [4, 3, 1, "", "__init__"], [4, 2, 1, "", "b_diag_mask"], [4, 2, 1, "", "b_diag_mask_idxs"], [4, 2, 1, "", "b_tril_mask"], [4, 2, 1, "", "bias"], [4, 2, 1, "", "block_shape"], [4, 2, 1, "", "cond_dim"], [4, 3, 1, "", "get_normalised_weights"], [4, 2, 1, "", "in_features"], [4, 2, 1, "", "n_blocks"], [4, 2, 1, "", "out_features"]], "flowjax.nn.MaskedLinear": [[4, 3, 1, "", "__init__"], [4, 2, 1, "", "linear"], [4, 2, 1, "", "mask"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"biject": 0, "distribut": 1, "flowjax": 3, "neural": 4, "network": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Bijections": [[0, "bijections"]], "Distributions": [[1, "distributions"]], "Neural networks": [[4, "neural-networks"]], "FlowJax": [[3, "flowjax"]]}, "indexentries": {"additivelinearcondition (class in flowjax.bijections)": [[0, "flowjax.bijections.AdditiveLinearCondition"]], "affine (class in flowjax.bijections)": [[0, "flowjax.bijections.Affine"]], "bijection (class in flowjax.bijections)": [[0, "flowjax.bijections.Bijection"]], "blockautoregressivenetwork (class in flowjax.bijections)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork"]], "chain (class in flowjax.bijections)": [[0, "flowjax.bijections.Chain"]], "coupling (class in flowjax.bijections)": [[0, "flowjax.bijections.Coupling"]], "d (coupling attribute)": [[0, "flowjax.bijections.Coupling.D"], [0, "flowjax.bijections.Coupling.d"]], "embedcondition (class in flowjax.bijections)": [[0, "flowjax.bijections.EmbedCondition"]], "flip (class in flowjax.bijections)": [[0, "flowjax.bijections.Flip"]], "invert (class in flowjax.bijections)": [[0, "flowjax.bijections.Invert"]], "maskedautoregressive (class in flowjax.bijections)": [[0, "flowjax.bijections.MaskedAutoregressive"]], "partial (class in flowjax.bijections)": [[0, "flowjax.bijections.Partial"]], "permute (class in flowjax.bijections)": [[0, "flowjax.bijections.Permute"]], "scannablechain (class in flowjax.bijections)": [[0, "flowjax.bijections.ScannableChain"]], "tanh (class in flowjax.bijections)": [[0, "flowjax.bijections.Tanh"]], "tanhlineartails (class in flowjax.bijections)": [[0, "flowjax.bijections.TanhLinearTails"]], "transformer (class in flowjax.bijections)": [[0, "flowjax.bijections.Transformer"]], "transformertobijection (class in flowjax.bijections)": [[0, "flowjax.bijections.TransformerToBijection"]], "triangularaffine (class in flowjax.bijections)": [[0, "flowjax.bijections.TriangularAffine"]], "w (additivelinearcondition attribute)": [[0, "flowjax.bijections.AdditiveLinearCondition.W"]], "__init__() (additivelinearcondition method)": [[0, "flowjax.bijections.AdditiveLinearCondition.__init__"]], "__init__() (affine method)": [[0, "flowjax.bijections.Affine.__init__"]], "__init__() (bijection method)": [[0, "flowjax.bijections.Bijection.__init__"]], "__init__() (blockautoregressivenetwork method)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.__init__"]], "__init__() (chain method)": [[0, "flowjax.bijections.Chain.__init__"]], "__init__() (coupling method)": [[0, "flowjax.bijections.Coupling.__init__"]], "__init__() (embedcondition method)": [[0, "flowjax.bijections.EmbedCondition.__init__"]], "__init__() (flip method)": [[0, "flowjax.bijections.Flip.__init__"]], "__init__() (invert method)": [[0, "flowjax.bijections.Invert.__init__"]], "__init__() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.__init__"]], "__init__() (partial method)": [[0, "flowjax.bijections.Partial.__init__"]], "__init__() (permute method)": [[0, "flowjax.bijections.Permute.__init__"]], "__init__() (scannablechain method)": [[0, "flowjax.bijections.ScannableChain.__init__"]], "__init__() (tanh method)": [[0, "flowjax.bijections.Tanh.__init__"]], "__init__() (tanhlineartails method)": [[0, "flowjax.bijections.TanhLinearTails.__init__"]], "__init__() (transformer method)": [[0, "flowjax.bijections.Transformer.__init__"]], "__init__() (transformertobijection method)": [[0, "flowjax.bijections.TransformerToBijection.__init__"]], "__init__() (triangularaffine method)": [[0, "flowjax.bijections.TriangularAffine.__init__"]], "activation (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.activation"]], "arr (triangularaffine property)": [[0, "flowjax.bijections.TriangularAffine.arr"]], "autoregressive_mlp (maskedautoregressive attribute)": [[0, "flowjax.bijections.MaskedAutoregressive.autoregressive_mlp"]], "bijection (embedcondition attribute)": [[0, "flowjax.bijections.EmbedCondition.bijection"]], "bijection (invert attribute)": [[0, "flowjax.bijections.Invert.bijection"]], "bijection (partial attribute)": [[0, "flowjax.bijections.Partial.bijection"]], "bijections (chain attribute)": [[0, "flowjax.bijections.Chain.bijections"]], "block_dim (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.block_dim"]], "cond_dim (additivelinearcondition attribute)": [[0, "flowjax.bijections.AdditiveLinearCondition.cond_dim"]], "cond_dim (bijection attribute)": [[0, "flowjax.bijections.Bijection.cond_dim"]], "cond_dim (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.cond_dim"]], "cond_dim (chain attribute)": [[0, "flowjax.bijections.Chain.cond_dim"]], "cond_dim (coupling attribute)": [[0, "flowjax.bijections.Coupling.cond_dim"]], "cond_dim (embedcondition attribute)": [[0, "flowjax.bijections.EmbedCondition.cond_dim"]], "cond_dim (flip attribute)": [[0, "flowjax.bijections.Flip.cond_dim"]], "cond_dim (invert attribute)": [[0, "flowjax.bijections.Invert.cond_dim"]], "cond_dim (maskedautoregressive attribute)": [[0, "flowjax.bijections.MaskedAutoregressive.cond_dim"]], "cond_dim (partial attribute)": [[0, "flowjax.bijections.Partial.cond_dim"]], "cond_dim (permute attribute)": [[0, "flowjax.bijections.Permute.cond_dim"]], "cond_dim (scannablechain attribute)": [[0, "flowjax.bijections.ScannableChain.cond_dim"]], "cond_dim (tanh attribute)": [[0, "flowjax.bijections.Tanh.cond_dim"]], "cond_dim (tanhlineartails attribute)": [[0, "flowjax.bijections.TanhLinearTails.cond_dim"]], "cond_dim (transformertobijection attribute)": [[0, "flowjax.bijections.TransformerToBijection.cond_dim"]], "cond_dim (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.cond_dim"]], "conditioner (coupling attribute)": [[0, "flowjax.bijections.Coupling.conditioner"]], "depth (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.depth"]], "diag_idxs (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.diag_idxs"]], "dim (additivelinearcondition attribute)": [[0, "flowjax.bijections.AdditiveLinearCondition.dim"]], "dim (affine attribute)": [[0, "flowjax.bijections.Affine.dim"]], "dim (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.dim"]], "dim (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.dim"]], "embedding_net (embedcondition attribute)": [[0, "flowjax.bijections.EmbedCondition.embedding_net"]], "flowjax.bijections": [[0, "module-flowjax.bijections"]], "get_args() (transformer method)": [[0, "flowjax.bijections.Transformer.get_args"]], "get_ranks() (transformer method)": [[0, "flowjax.bijections.Transformer.get_ranks"]], "get_transformer_args() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.get_transformer_args"]], "idxs (partial attribute)": [[0, "flowjax.bijections.Partial.idxs"]], "intercept (tanhlineartails property)": [[0, "flowjax.bijections.TanhLinearTails.intercept"]], "inv_scan_fn() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.inv_scan_fn"]], "inverse() (additivelinearcondition method)": [[0, "flowjax.bijections.AdditiveLinearCondition.inverse"]], "inverse() (affine method)": [[0, "flowjax.bijections.Affine.inverse"]], "inverse() (bijection method)": [[0, "flowjax.bijections.Bijection.inverse"]], "inverse() (blockautoregressivenetwork method)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.inverse"]], "inverse() (chain method)": [[0, "flowjax.bijections.Chain.inverse"]], "inverse() (coupling method)": [[0, "flowjax.bijections.Coupling.inverse"]], "inverse() (embedcondition method)": [[0, "flowjax.bijections.EmbedCondition.inverse"]], "inverse() (flip method)": [[0, "flowjax.bijections.Flip.inverse"]], "inverse() (invert method)": [[0, "flowjax.bijections.Invert.inverse"]], "inverse() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.inverse"]], "inverse() (partial method)": [[0, "flowjax.bijections.Partial.inverse"]], "inverse() (permute method)": [[0, "flowjax.bijections.Permute.inverse"]], "inverse() (scannablechain method)": [[0, "flowjax.bijections.ScannableChain.inverse"]], "inverse() (tanh method)": [[0, "flowjax.bijections.Tanh.inverse"]], "inverse() (tanhlineartails method)": [[0, "flowjax.bijections.TanhLinearTails.inverse"]], "inverse() (transformer method)": [[0, "flowjax.bijections.Transformer.inverse"]], "inverse() (transformertobijection method)": [[0, "flowjax.bijections.TransformerToBijection.inverse"]], "inverse() (triangularaffine method)": [[0, "flowjax.bijections.TriangularAffine.inverse"]], "inverse_and_log_abs_det_jacobian() (additivelinearcondition method)": [[0, "flowjax.bijections.AdditiveLinearCondition.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (affine method)": [[0, "flowjax.bijections.Affine.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (bijection method)": [[0, "flowjax.bijections.Bijection.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (blockautoregressivenetwork method)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (chain method)": [[0, "flowjax.bijections.Chain.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (coupling method)": [[0, "flowjax.bijections.Coupling.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (embedcondition method)": [[0, "flowjax.bijections.EmbedCondition.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (flip method)": [[0, "flowjax.bijections.Flip.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (invert method)": [[0, "flowjax.bijections.Invert.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (partial method)": [[0, "flowjax.bijections.Partial.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (permute method)": [[0, "flowjax.bijections.Permute.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (scannablechain method)": [[0, "flowjax.bijections.ScannableChain.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (tanh method)": [[0, "flowjax.bijections.Tanh.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (tanhlineartails method)": [[0, "flowjax.bijections.TanhLinearTails.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (transformer method)": [[0, "flowjax.bijections.Transformer.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (transformertobijection method)": [[0, "flowjax.bijections.TransformerToBijection.inverse_and_log_abs_det_jacobian"]], "inverse_and_log_abs_det_jacobian() (triangularaffine method)": [[0, "flowjax.bijections.TriangularAffine.inverse_and_log_abs_det_jacobian"]], "inverse_permutation (permute attribute)": [[0, "flowjax.bijections.Permute.inverse_permutation"]], "layers (blockautoregressivenetwork attribute)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.layers"]], "linear_grad (tanhlineartails property)": [[0, "flowjax.bijections.TanhLinearTails.linear_grad"]], "loc (affine attribute)": [[0, "flowjax.bijections.Affine.loc"]], "loc (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.loc"]], "log_scale (affine attribute)": [[0, "flowjax.bijections.Affine.log_scale"]], "lower (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.lower"]], "max_val (tanhlineartails attribute)": [[0, "flowjax.bijections.TanhLinearTails.max_val"]], "min_diag (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.min_diag"]], "module": [[0, "module-flowjax.bijections"], [1, "module-flowjax.distributions"], [4, "module-flowjax.nn"]], "num_params() (transformer method)": [[0, "flowjax.bijections.Transformer.num_params"]], "params (scannablechain attribute)": [[0, "flowjax.bijections.ScannableChain.params"]], "params (transformertobijection attribute)": [[0, "flowjax.bijections.TransformerToBijection.params"]], "permutation (permute attribute)": [[0, "flowjax.bijections.Permute.permutation"]], "scale (affine property)": [[0, "flowjax.bijections.Affine.scale"]], "static (scannablechain attribute)": [[0, "flowjax.bijections.ScannableChain.static"]], "transform() (additivelinearcondition method)": [[0, "flowjax.bijections.AdditiveLinearCondition.transform"]], "transform() (affine method)": [[0, "flowjax.bijections.Affine.transform"]], "transform() (bijection method)": [[0, "flowjax.bijections.Bijection.transform"]], "transform() (blockautoregressivenetwork method)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.transform"]], "transform() (chain method)": [[0, "flowjax.bijections.Chain.transform"]], "transform() (coupling method)": [[0, "flowjax.bijections.Coupling.transform"]], "transform() (embedcondition method)": [[0, "flowjax.bijections.EmbedCondition.transform"]], "transform() (flip method)": [[0, "flowjax.bijections.Flip.transform"]], "transform() (invert method)": [[0, "flowjax.bijections.Invert.transform"]], "transform() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.transform"]], "transform() (partial method)": [[0, "flowjax.bijections.Partial.transform"]], "transform() (permute method)": [[0, "flowjax.bijections.Permute.transform"]], "transform() (scannablechain method)": [[0, "flowjax.bijections.ScannableChain.transform"]], "transform() (tanh method)": [[0, "flowjax.bijections.Tanh.transform"]], "transform() (tanhlineartails method)": [[0, "flowjax.bijections.TanhLinearTails.transform"]], "transform() (transformer method)": [[0, "flowjax.bijections.Transformer.transform"]], "transform() (transformertobijection method)": [[0, "flowjax.bijections.TransformerToBijection.transform"]], "transform() (triangularaffine method)": [[0, "flowjax.bijections.TriangularAffine.transform"]], "transform_and_log_abs_det_jacobian() (additivelinearcondition method)": [[0, "flowjax.bijections.AdditiveLinearCondition.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (affine method)": [[0, "flowjax.bijections.Affine.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (bijection method)": [[0, "flowjax.bijections.Bijection.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (blockautoregressivenetwork method)": [[0, "flowjax.bijections.BlockAutoregressiveNetwork.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (chain method)": [[0, "flowjax.bijections.Chain.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (coupling method)": [[0, "flowjax.bijections.Coupling.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (embedcondition method)": [[0, "flowjax.bijections.EmbedCondition.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (flip method)": [[0, "flowjax.bijections.Flip.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (invert method)": [[0, "flowjax.bijections.Invert.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (maskedautoregressive method)": [[0, "flowjax.bijections.MaskedAutoregressive.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (partial method)": [[0, "flowjax.bijections.Partial.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (permute method)": [[0, "flowjax.bijections.Permute.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (scannablechain method)": [[0, "flowjax.bijections.ScannableChain.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (tanh method)": [[0, "flowjax.bijections.Tanh.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (tanhlineartails method)": [[0, "flowjax.bijections.TanhLinearTails.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (transformer method)": [[0, "flowjax.bijections.Transformer.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (transformertobijection method)": [[0, "flowjax.bijections.TransformerToBijection.transform_and_log_abs_det_jacobian"]], "transform_and_log_abs_det_jacobian() (triangularaffine method)": [[0, "flowjax.bijections.TriangularAffine.transform_and_log_abs_det_jacobian"]], "transformer (coupling attribute)": [[0, "flowjax.bijections.Coupling.transformer"]], "transformer (maskedautoregressive attribute)": [[0, "flowjax.bijections.MaskedAutoregressive.transformer"]], "transformer (transformertobijection attribute)": [[0, "flowjax.bijections.TransformerToBijection.transformer"]], "tri_mask (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.tri_mask"]], "weight_log_scale (triangularaffine attribute)": [[0, "flowjax.bijections.TriangularAffine.weight_log_scale"]], "cauchy (class in flowjax.distributions)": [[1, "flowjax.distributions.Cauchy"]], "distribution (class in flowjax.distributions)": [[1, "flowjax.distributions.Distribution"]], "gumbel (class in flowjax.distributions)": [[1, "flowjax.distributions.Gumbel"]], "normal (class in flowjax.distributions)": [[1, "flowjax.distributions.Normal"]], "standardnormal (class in flowjax.distributions)": [[1, "flowjax.distributions.StandardNormal"]], "studentt (class in flowjax.distributions)": [[1, "flowjax.distributions.StudentT"]], "transformed (class in flowjax.distributions)": [[1, "flowjax.distributions.Transformed"]], "uniform (class in flowjax.distributions)": [[1, "flowjax.distributions.Uniform"]], "__init__() (cauchy method)": [[1, "flowjax.distributions.Cauchy.__init__"]], "__init__() (distribution method)": [[1, "flowjax.distributions.Distribution.__init__"]], "__init__() (gumbel method)": [[1, "flowjax.distributions.Gumbel.__init__"]], "__init__() (normal method)": [[1, "flowjax.distributions.Normal.__init__"]], "__init__() (standardnormal method)": [[1, "flowjax.distributions.StandardNormal.__init__"]], "__init__() (studentt method)": [[1, "flowjax.distributions.StudentT.__init__"]], "__init__() (transformed method)": [[1, "flowjax.distributions.Transformed.__init__"]], "__init__() (uniform method)": [[1, "flowjax.distributions.Uniform.__init__"]], "base_dist (transformed attribute)": [[1, "flowjax.distributions.Transformed.base_dist"]], "bijection (transformed attribute)": [[1, "flowjax.distributions.Transformed.bijection"]], "cond_dim (distribution attribute)": [[1, "flowjax.distributions.Distribution.cond_dim"]], "cond_dim (transformed attribute)": [[1, "flowjax.distributions.Transformed.cond_dim"]], "conditional (distribution property)": [[1, "flowjax.distributions.Distribution.conditional"]], "df (studentt property)": [[1, "flowjax.distributions.StudentT.df"]], "dim (distribution attribute)": [[1, "flowjax.distributions.Distribution.dim"]], "dim (transformed attribute)": [[1, "flowjax.distributions.Transformed.dim"]], "flowjax.distributions": [[1, "module-flowjax.distributions"]], "loc (cauchy property)": [[1, "flowjax.distributions.Cauchy.loc"]], "loc (gumbel property)": [[1, "flowjax.distributions.Gumbel.loc"]], "loc (normal property)": [[1, "flowjax.distributions.Normal.loc"]], "loc (studentt property)": [[1, "flowjax.distributions.StudentT.loc"]], "log_prob() (distribution method)": [[1, "flowjax.distributions.Distribution.log_prob"]], "maxval (uniform property)": [[1, "flowjax.distributions.Uniform.maxval"]], "minval (uniform property)": [[1, "flowjax.distributions.Uniform.minval"]], "sample() (distribution method)": [[1, "flowjax.distributions.Distribution.sample"]], "scale (cauchy property)": [[1, "flowjax.distributions.Cauchy.scale"]], "scale (gumbel property)": [[1, "flowjax.distributions.Gumbel.scale"]], "scale (normal property)": [[1, "flowjax.distributions.Normal.scale"]], "scale (studentt property)": [[1, "flowjax.distributions.StudentT.scale"]], "autoregressivemlp (class in flowjax.nn)": [[4, "flowjax.nn.AutoregressiveMLP"]], "blockautoregressivelinear (class in flowjax.nn)": [[4, "flowjax.nn.BlockAutoregressiveLinear"]], "maskedlinear (class in flowjax.nn)": [[4, "flowjax.nn.MaskedLinear"]], "w (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.W"]], "w_log_scale (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.W_log_scale"]], "__init__() (autoregressivemlp method)": [[4, "flowjax.nn.AutoregressiveMLP.__init__"]], "__init__() (blockautoregressivelinear method)": [[4, "flowjax.nn.BlockAutoregressiveLinear.__init__"]], "__init__() (maskedlinear method)": [[4, "flowjax.nn.MaskedLinear.__init__"]], "activation (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.activation"]], "b_diag_mask (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.b_diag_mask"]], "b_diag_mask_idxs (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.b_diag_mask_idxs"]], "b_tril_mask (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.b_tril_mask"]], "bias (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.bias"]], "block_shape (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.block_shape"]], "cond_dim (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.cond_dim"]], "depth (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.depth"]], "final_activation (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.final_activation"]], "flowjax.nn": [[4, "module-flowjax.nn"]], "get_normalised_weights() (blockautoregressivelinear method)": [[4, "flowjax.nn.BlockAutoregressiveLinear.get_normalised_weights"]], "hidden_ranks (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.hidden_ranks"]], "in_features (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.in_features"]], "in_ranks (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.in_ranks"]], "in_size (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.in_size"]], "layers (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.layers"]], "linear (maskedlinear attribute)": [[4, "flowjax.nn.MaskedLinear.linear"]], "mask (maskedlinear attribute)": [[4, "flowjax.nn.MaskedLinear.mask"]], "n_blocks (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.n_blocks"]], "out_features (blockautoregressivelinear attribute)": [[4, "flowjax.nn.BlockAutoregressiveLinear.out_features"]], "out_ranks (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.out_ranks"]], "out_size (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.out_size"]], "width_size (autoregressivemlp attribute)": [[4, "flowjax.nn.AutoregressiveMLP.width_size"]]}})